import { Velo, LoaderFunction } from "../mod.ts";

/**
 * This example highlights the loading cache functionality.
 */

/**
 * Loader function that generates the value for a given key.
 * Errors if the key is an empty string.
 */
const loadFunc: LoaderFunction<string, number> = (key: string) => {
  const value = key.length;
  console.log(`Loading value for key: "${key}" -> ${value}`);
  if (value === 0) throw new Error("Key cannot be empty");
  return value;
};

const loadingCache = Velo.builder<string, number>()
  .capacity(10_000)
  .lru()
  .stats() // enable stats collection, also collects loading specific stats
  .build(loadFunc);

const v = loadingCache.get("a"); // key is not in the cache and will be generated by the loader function
console.log("returned value:", v); // 1, the generated value by the loader function
console.log("key in cache?", loadingCache.has("a")); // value is now in the cache

try {
  // the loader function will throw an error if the key is an empty string
  // no entry will be added to the cache and the error is passed through
  loadingCache.get("");
} catch (e) {
  console.log("LoaderFunction error:", e.message);
}

// the refresh function will reapply the loader function to the given key
console.log(Reflect.has(loadingCache, "refresh")); // number
loadingCache.refresh("a");
