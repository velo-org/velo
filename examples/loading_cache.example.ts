/**
 * This example highlights the loading cache functionality.
 */

import { Velo, VELO_EVENT_DEFAULTS } from "../src/cache/builder.ts";
import { LoaderFunction } from "../src/models/cache.ts";

/**
 * Loader function that generates the value for a given key.
 * Errors if the key is an empty string.
 */
const loadFunc: LoaderFunction<string, number> = (key: string) => {
  const value = key.length;
  console.log(`Loading value for key: "${key}" -> ${value}`);
  if (value === 0) throw new Error("Key cannot be empty");
  return value;
};

const loadingCache = Velo.builder<string, number>()
  .capacity(10_000)
  .stats() // enable stats collection, also collects loading specific stats
  .build(loadFunc);

const v = loadingCache.get("a"); // key is not in the cache and will be generated by the loader function
console.log("returned value:", v); // 1, the generated value by the loader function
console.log("key in cache?", loadingCache.has("a")); // value is now in the cache

try {
  // the loader function will throw an error if the key is an empty string
  // no entry will be added to the cache and the error is passed through
  loadingCache.get("");
} catch (e) {
  console.log("LoaderFunction error:", e.message);
}

// the refresh function will reapply the loader function to the given key
loadingCache.refresh("a");

// with stats enabled we can see how many times the loader function was called
console.log(
  `LoaderFunction 
  success count: ${loadingCache.stats.loadSuccessCount}
  failure count: ${loadingCache.stats.loadFailCount}
  failure rate: ${loadingCache.stats.loadFailureRate}`
);

/**
 * The LoadingCache also supports specifc loading events.
 */
const loadingCache2 = Velo.builder<string, number>()
  .capacity(10_000)
  .events({ ...VELO_EVENT_DEFAULTS, load: true, loaded: true })
  .build(loadFunc);

loadingCache2.events.on("load", (key) => {
  console.log(`Started loading key: ${key}`);
});

loadingCache2.events.on("loaded", (key, value) => {
  console.log(`Finnished loading key: ${key} and generated value: ${value}`);
});
